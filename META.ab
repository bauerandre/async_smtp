version = "$(pkg_version)"
description = "SMTP client and server"
requires = "async async_extended async_ssl bin_prot core core_extended email_message fieldslib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib textutils typerep variantslib"
archive(byte  ) = "async_smtp.cma"
archive(native) = "async_smtp.cmxa"
plugin(byte  ) = "async_smtp.cma"
plugin(native) = "async_smtp.cmxs"
exists_if = "async_smtp.cma"

package "command" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_smtp bin_prot core email_message fieldslib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib textutils typerep variantslib"
  archive(byte  ) = "async_smtp_command.cma"
  archive(native) = "async_smtp_command.cmxa"
  plugin(byte  ) = "async_smtp_command.cma"
  plugin(native) = "async_smtp_command.cmxs"
  exists_if = "async_smtp_command.cma"
)

package "tools" (
  version = "$(pkg_version)"
  description = ""
  requires = "async async_shell async_smtp async_smtp.command bin_prot core cryptokit email_message fieldslib ppx_assert.runtime-lib ppx_bench.runtime-lib ppx_expect.collector ppx_hash.runtime-lib ppx_inline_test.runtime-lib re2 sexplib textutils typerep variantslib"
  archive(byte  ) = "async_smtp_tools.cma"
  archive(native) = "async_smtp_tools.cmxa"
  plugin(byte  ) = "async_smtp_tools.cma"
  plugin(native) = "async_smtp_tools.cmxs"
  exists_if = "async_smtp_tools.cma"
)
